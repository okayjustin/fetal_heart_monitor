from funcs import *
from recorder import *
import numpy as np
import matplotlib.pyplot as plt
import pyaudio
import time
from timeit import default_timer as timer

# Fetal heart monitor
class FHM():
    def __init__(self):
        hn_path = './hn.csv'

        self.chunk = 4096
        self.format = pyaudio.paInt16
        self.rate = 44100
        RECORD_SECONDS = 5
        WAVE_OUTPUT_FILENAME = "output.wav"

        self.p = pyaudio.PyAudio()
        self.fname = 'test.wav'
        self.mode = 'wb'
        self.channels = 1

        self.wavefile = self._prepare_file(self.fname, self.mode)

        # Import filter h[n] generated by MATLAB
        self.hn_arr = parse_hn(hn_path)

        # Init smoother
        self.smoother = SmoothSeq()

    def start_recording(self):
        self.stream = self.p.open(format=self.format,
                        channels= self.channels,
                        rate=self.rate,
                        input=True,
                        frames_per_buffer=self.chunk,
                        stream_callback=self.get_callback())

        self.stream.start_stream()

    def close(self):
        try:
            self.stream.close()
        except:
            pass
        self.p.terminate()

    def get_callback(self):
        def callback(in_data, frame_count, time_info, status):
            start_time = timer()
            audio_data = np.fromstring(in_data, dtype=np.int16)
            self.processAudio(audio_data)
#            self.wavefile.writeframes(in_data)
            end_time = timer()
            print("Callback %0.1f ms" % ((end_time - start_time)*1000))
            return in_data, pyaudio.paContinue
        return callback

    def _prepare_file(self, fname, mode='wb'):
        wavefile = wave.open(fname, mode)
        wavefile.setnchannels(self.channels)
        wavefile.setsampwidth(self.p.get_sample_size(pyaudio.paInt16))
        wavefile.setframerate(self.rate)
        return wavefile

    def processAudioMA(self, audio_data):
        start = timer()

        # Calculate length of audio file
        total_time = 1.0 * np.size(audio_data) / self.rate

        # Bandpass filter data
        filtered_data = filter_data(audio_data, self.hn_arr)

        # Get data magnitude
        abs_filt_audio_data = abs(filtered_data)
        abs_audio_data = abs(audio_data)

        # Smooth data
        smoothed_abs_filt_audio_data = self.smoother.smooth(abs_filt_audio_data)
        smoothed_abs_audio_data = self.smoother.smooth(abs_audio_data)

        # Determine number of peaks in signal power
        peaks_filt, peaks_idx_filt = findpeaks(smoothed_abs_filt_audio_data, 0.2, 10000)
        peaks, peaks_idx = findpeaks(smoothed_abs_audio_data, 0.2, 10000)

        # Calculate frequency with filter
        num_peaks = np.size(peaks_filt)
        freq = num_peaks / total_time
        print("Heart rate: %0.1f bpm" % (freq*60))

        # Calc freq w/o filter
        num_peaks = np.size(peaks)
        freq = num_peaks / total_time
        print("Heart rate (no filter): %0.1f bpm" % (freq*60))

        end = timer()
        print(end-start)

        #Plot everything
        fig = plt.figure()
        ax1 = fig.add_subplot(311)
        ax1.plot(abs_filt_audio_data, 'b')
        ax1.plot(smoothed_abs_filt_audio_data, 'r')
        ax1.plot(smoothed_abs_audio_data, 'g')

        ax2 = fig.add_subplot(312)
        ax2.plot(smoothed_abs_filt_audio_data, 'r')
        ax2.scatter(peaks_idx_filt, peaks_filt)

        ax3 = fig.add_subplot(313)
        ax3.plot(smoothed_abs_audio_data, 'g')
        ax3.scatter(peaks_idx, peaks)

        plt.title('Signal Power vs. Time')
        plt.ylabel('Signal Power')
        plt.xlabel('Time [sec]')
        plt.show()


    def processAudio(self, audio_data):
        start = timer()

        # Calculate length of audio file
        total_time = 1.0 * np.size(audio_data) / self.rate

        # Bandpass filter data
        filtered_data = filter_data(audio_data, self.hn_arr)

        # Smooth data
        s = do_stft(filtered_data, self.rate)
        sigpwr = stft2sigpower(s)

        # Determine number of peaks in signal power
        peaks, peaks_idx = findpeaks(sigpwr, 0.05, 1)

        # Calculate frequency
        num_peaks = np.size(peaks)
        freq = num_peaks / total_time
        print("Heart rate: %0.1f bpm" % (freq*60))

        end = timer()
        print(end-start)

        #Plot everything
        fig = plt.figure()
        ax1 = fig.add_subplot(111)
        ax1.plot(sigpwr)
        ax1.scatter(peaks_idx, peaks)
        plt.title('Signal Power vs. Time')
        plt.ylabel('Signal Power')
        plt.xlabel('Time [sec]')
        plt.show()

if __name__ == "__main__":
    # Import audio data
    wav_path = './fetal_heart_filtered.wav'
    audio_data = input_audio(wav_path)
#    audio_data = audio_data[500000:941000-1]
#    audio_data = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

    monitor = FHM()
    monitor.processAudio(audio_data)
#    monitor.start_recording()
    monitor.close()

