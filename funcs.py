
# import numpy as np


# Input: path of CSV file containing h[n] generated by MATLAB
# Output: numpy array of h[n] values
def parse_hn(file_path):
    # hn = np.array([])
    hn_arr = []

    with open(file_path, 'r') as fp:
        file_data = fp.read().strip('\n').split(",")

    for data in file_data:
        hn_arr.append(float(data))

    return hn_arr


# Input: path of .wav audio file
# Output: numpy array of audio data values (only left channel if .wav has more than 1 channel)
def input_audio(file_path):
    audio_data = np.array([])

    with open(file_path, 'r') as fp:
        file_data = fp.read().strip('\n').split(",")

    return audio_data


# Input:
#   xn: data sequence to filter
#   hn: impulse response sequence
# Output: filtered sequence
def filter(xn, hn):
    yn = np.array([])

    return yn


# Input: xn: data sequence to take short time fourier transform of
# Output: stft result
def stft(xn):
    s = np.array([])

    return s


# Input: array of signal powers over time
# Output: peak values in sig_power and locations as indices
def findpeaks(sig_power):
    peaks = np.array([])
    locs = np.array([])

    return (peaks, locs)

